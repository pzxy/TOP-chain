// Copyright (c) 2018-2020 Telos Foundation & contributors
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "xplugin/xaudit_plugin.h"

#include "string"
#include "xbase/xbase.h"
#include "xbase/xns_macro.h"
#include "xplugin/xdynamiclib.h"
#include "xplugin/xplugin.h"

#include <iostream>

using namespace std;

NS_BEG2(top, data)
typedef auditor_t * (*f_new_t)(void);
typedef void (*f_run_t)(auditor_t *);
typedef void (*f_free_t)(auditor_t *);
typedef bool (*f_is_audit_t)(auditor_t *, const char * account);
typedef void (*f_async_audit_t)(auditor_t *, const char * tx);

xaudit_pligin::xaudit_pligin(const string & plugin_name) {
    m_plugin_name = plugin_name;
}

bool xaudit_pligin::load() {
    if (true == m_plugin_name.empty()) {
        return false;
    }
    if (false == m_dylib.load(m_plugin_name)) {
        return false;
    };

    if (nullptr != m_auditor) {
        return true;
    }

    f_new_t f_new = m_dylib.function<f_new_t>("new");
    if (nullptr == f_new) {
        return false;
    }
    m_auditor = (f_new)();
    return nullptr != m_auditor;
}
void xaudit_pligin::run() {
    f_run_t f_run = m_dylib.function<f_run_t>("run");
    if (nullptr == f_run) {
        return;
    }
    (f_run)(m_auditor);
}

void xaudit_pligin::free() {
    f_free_t f_free = m_dylib.function<f_free_t>("free");
    if (nullptr == f_free) {
        return;
    }
    (*f_free)(m_auditor);
}

bool xaudit_pligin::is_audit(string account) {
    f_is_audit_t f_is_audit = m_dylib.function<f_is_audit_t>("is_audit");
    if (nullptr == f_is_audit) {
        return false;
    }
    return (*f_is_audit)(m_auditor, account.c_str());
}

// TODO:  the transaction : callback
void xaudit_pligin::async_audit(string data, std::function<void(void)> callback) {
    f_async_audit_t f_async_audit = m_dylib.function<f_async_audit_t>("async_audit");
    if (nullptr == f_async_audit) {
        return;
    }
    // map[tx_hash] = callback;
    (*f_async_audit)(m_auditor, data.c_str());
}

NS_END2